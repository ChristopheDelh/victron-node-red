[
    {
        "id": "e595066f0438a795",
        "type": "tab",
        "label": "OP - MANDATORY Universal nodes ",
        "disabled": false,
        "info": "These nodes must ALLWAYS be implemented",
        "env": []
    },
    {
        "id": "a0153a2235a01066",
        "type": "tab",
        "label": "OP - MANDATORY Balancing Sub-Flow & System-Wide Vars ",
        "disabled": false,
        "info": "These nodes must ALLWAYS be implemented unless no charging sequences are being used\n\nThe base of this flow is managed with BMS returning info on balancing cells or not. \nAdapt accordingly. Further info on what to do in description of balancing timer and activation",
        "env": []
    },
    {
        "id": "88528a05a79df186",
        "type": "tab",
        "label": "OP -Dynamic Current Limiting",
        "disabled": false,
        "info": "This Flow is used to limit the multiplus or quattro charging current based to what max current draw is set for generator or shore power. This flow uses 2 ET112 power meters but one of these power analysers can be replaced by the Multiplus/quattro node as long as it provides a reading for the Amps drawn on the input. This function also requires a digital input to trigger between shore or generator. This switch can be replaced by input 1 or 2 on quattros",
        "env": []
    },
    {
        "id": "d2855c6ff5fe1d8c",
        "type": "tab",
        "label": "OP - Charge Cycle Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "81c7a8a38f0557f0",
        "type": "tab",
        "label": "OP - Solar cycle Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11a4bfd096900c1f",
        "type": "tab",
        "label": "Alternator Mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "victron-client-id",
        "type": "victron-client"
    },
    {
        "id": "39ad39b479732dac",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "aed689e284f65765",
        "type": "ui_group",
        "name": "Dynamic Current Limit",
        "tab": "7e2c0f9765da0a44",
        "order": 2,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2d51d403d65e5320",
        "type": "ui_group",
        "name": "Shore Power & Charge Cycle",
        "tab": "7e2c0f9765da0a44",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "0489adf761799c8a",
        "type": "ui_group",
        "name": "Battery Balancing",
        "tab": "7e2c0f9765da0a44",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7e2c0f9765da0a44",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "80bcd9f1770e5bb2",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "e83b21fe9b4d6467",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "e05034a0a9b06b6d",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "7f18e71f4907f0f1",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "d2a6b1d5f0c4573e",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "3e55da00deb9df23",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "4a09933e665beff5",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "84a80db792f0e7e4",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "dc86166de55a1d6e",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "5407c7d6f3cf9abb",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 15,
        "width": 3,
        "height": 1
    },
    {
        "id": "6f52138bffab0c03",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "0f344d79d22d6ce8",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "aed689e284f65765",
        "order": 17,
        "width": 3,
        "height": 1
    },
    {
        "id": "55b47d537f8a430d",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 13,
        "width": 9,
        "height": 1
    },
    {
        "id": "cce733b5e800121d",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "a32b805b61e69c13",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 18,
        "width": 9,
        "height": 1
    },
    {
        "id": "b72db7eaee192d60",
        "type": "ui_spacer",
        "z": "11a4bfd096900c1f",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 22,
        "width": 9,
        "height": 1
    },
    {
        "id": "5bdd7071be620899",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default StorMaxSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "70",
        "payloadType": "num",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "aafd072fdc3d20f1"
            ]
        ]
    },
    {
        "id": "5b93219ec9a70fbe",
        "type": "function",
        "z": "e595066f0438a795",
        "name": "Debug for global stored values ",
        "func": "const variableNames = [\n    \"AcFixed\",\n    \"BalanceInterval\",\n    \"BalanceTime\",\n    \"BattSoc\",\n    \"BmsBalancing\",\n    \"ChargeEnabled\",\n    \"ChargeToFull\",\n    \"CurrentLimitOverride\",\n    \"LastBalance\",\n    \"MaxSoc\",\n    \"MultiRestartSoc\",\n    \"MultiState\",\n    \"ShoreMaxCurrent\",\n    \"SolarMgmt\",\n    \"SystemVoltage\",\n    \"VesselInput\",\n];\n\nconst globalValues = Object.fromEntries(\n    variableNames.map(name => [name, global.get(name)])\n);\n\nreturn {\n    payload: globalValues,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 540,
        "wires": [
            [
                "8c1672f801313817"
            ]
        ]
    },
    {
        "id": "8c1672f801313817",
        "type": "debug",
        "z": "e595066f0438a795",
        "name": "All stored values",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 540,
        "wires": []
    },
    {
        "id": "a9fc34a6164cbf90",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "5b93219ec9a70fbe"
            ]
        ]
    },
    {
        "id": "4a3c0f4f4028d864",
        "type": "comment",
        "z": "e595066f0438a795",
        "name": "Debug",
        "info": "",
        "x": 90,
        "y": 480,
        "wires": []
    },
    {
        "id": "153ab54281d9537e",
        "type": "comment",
        "z": "e595066f0438a795",
        "name": "Universal global variables",
        "info": "",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "04277a6155c283cb",
        "type": "victron-input-battery",
        "z": "e595066f0438a795",
        "service": "com.victronenergy.battery/0",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "Battery SOC",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "fe11ad36481aa016"
            ]
        ]
    },
    {
        "id": "f91dc601970363d1",
        "type": "ui_gauge",
        "z": "e595066f0438a795",
        "name": "Battery SOC",
        "group": "2d51d403d65e5320",
        "order": 20,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Battery SOC",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "43794d22e6b02aa9",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default  Storage Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "40",
        "payloadType": "num",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "f21f2c0c4dd91339"
            ]
        ]
    },
    {
        "id": "741fa095bb9d5e2c",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default Sail RestartSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "85",
        "payloadType": "num",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "0f5154044ec2d735"
            ]
        ]
    },
    {
        "id": "9b9298a19589e0ed",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default SailMaxSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "98",
        "payloadType": "num",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "7b66fe3d0b1d2119"
            ]
        ]
    },
    {
        "id": "aafd072fdc3d20f1",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7b66fe3d0b1d2119",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f21f2c0c4dd91339",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0f5154044ec2d735",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "fe11ad36481aa016",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BattSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "f91dc601970363d1"
            ]
        ]
    },
    {
        "id": "740f0a4e23ca1d56",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Trigger if past BalanceInterval",
        "func": "const currentTimestamp = Date.now();\nconst LastBalance = flow.get(\"LastBalance\");\nconst BalanceInterval = flow.get(\"BalanceInterval\");\nlet ChargeToFull = global.get(\"ChargeToFull\");\n\nif (ChargeToFull === 1) {\n    node.status({fill: \"yellow\", shape: \"dot\", text: \"Charge to Full\"});\n    return;\n} else if (ChargeToFull === 0) {\n    const millisSinceLastBalance = currentTimestamp - LastBalance;\n    const millisBalanceInterval = BalanceInterval * 24 * 60 * 60 * 1000;\n    if (millisSinceLastBalance >= millisBalanceInterval) {\n        node.status({fill: \"yellow\", shape: \"dot\", text: \"Charge to Full\"});\n        return {\n            payload: 1,\n        };\n    }\n}\n\nnode.status({fill: \"green\", shape: \"dot\", text: \"Normal Operation\"});",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "8d13abf189e782ed"
            ]
        ]
    },
    {
        "id": "5a039f79dac8db60",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "Run every ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "740f0a4e23ca1d56"
            ]
        ]
    },
    {
        "id": "71f3e6035ef1ebf1",
        "type": "ui_text",
        "z": "a0153a2235a01066",
        "group": "0489adf761799c8a",
        "order": 3,
        "width": 5,
        "height": 1,
        "name": "LastBalanceDate",
        "label": "Last Balance Date",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 380,
        "wires": []
    },
    {
        "id": "88e8f33706081c18",
        "type": "ui_button",
        "z": "a0153a2235a01066",
        "name": "Force Full Charge",
        "group": "0489adf761799c8a",
        "order": 8,
        "width": 9,
        "height": 1,
        "passthru": true,
        "label": "Force Full Charge",
        "tooltip": "If you want to attempt a manual balancing cycle",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "8d13abf189e782ed",
                "4a1ad39e0c228d69"
            ]
        ]
    },
    {
        "id": "a5626118fb069010",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "ChargeToFull",
        "payloadType": "global",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "604f46ac7f105e7b"
            ]
        ]
    },
    {
        "id": "43156233db16164b",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Trigger ChargeToFull Manually or after BalanceInterval",
        "info": "",
        "x": 220,
        "y": 500,
        "wires": []
    },
    {
        "id": "6c273b31f504695d",
        "type": "ui_numeric",
        "z": "a0153a2235a01066",
        "name": "Automatic Balancing Interval",
        "label": "Automatic Balancing Interval (Days)",
        "tooltip": "This value is to tell the system every how many days we have to check if there is a need to balance the cells. When the number of days since the last check have been passed the system will trigger a cycle to charge up to 28.4V and look if the batteries start balancing. If not, the timer is reset. If the cells start balancing it waits untill balancing is finished and resets the timer ",
        "group": "0489adf761799c8a",
        "order": 6,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "15",
        "max": "30",
        "step": "1",
        "className": "",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "9119099aef5924b4"
            ]
        ]
    },
    {
        "id": "fbe958fe4554df69",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "30",
        "payloadType": "num",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "6c273b31f504695d"
            ]
        ]
    },
    {
        "id": "9d7b9b40c4e6ac6a",
        "type": "ui_numeric",
        "z": "a0153a2235a01066",
        "name": "Balancing timer",
        "label": "Balancing timer",
        "tooltip": "This value represents the amount of time (in mins) that the balancing logic will wait once the voltage has reached the required level to engage balancing. 28.4V for a 24V system or 14.2V for a 12V system. This is to make certain the cells get the time to start balancing and report to the BMS",
        "group": "0489adf761799c8a",
        "order": 7,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "15",
        "max": "60",
        "step": "5",
        "className": "",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "46191c5740758be0"
            ]
        ]
    },
    {
        "id": "5e03a4e9181555db",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "9d7b9b40c4e6ac6a"
            ]
        ]
    },
    {
        "id": "3775f83ceb32f051",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Convert timestamp to date string",
        "func": "const timestamp = msg.payload;\nconst date = new Date(timestamp);\n\n// Extracting day, month, and year from the date\nconst day = String(date.getDate()).padStart(2, '0');\nconst month = String(date.getMonth() + 1).padStart(2, '0'); // Adding 1 because months are zero-based\nconst year = date.getFullYear();\n\n// Constructing the formatted date string\nconst formattedDate = `${day}-${month}-${year}`;\n\nreturn {\n    payload: formattedDate,\n};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "71f3e6035ef1ebf1"
            ]
        ]
    },
    {
        "id": "d38bc62018e87077",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "LastBalance set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "876ab6074a82af01",
                "7d5321421c739f4e"
            ]
        ]
    },
    {
        "id": "f440a8c26e7265c7",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Initial and dashboard values",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "f562dbbad94d9bb4",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Detect when balancing is happening and completed",
        "info": "",
        "x": 210,
        "y": 800,
        "wires": []
    },
    {
        "id": "74d8af590d0e9632",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "8d13abf189e782ed"
            ]
        ]
    },
    {
        "id": "604f46ac7f105e7b",
        "type": "ui_led",
        "z": "a0153a2235a01066",
        "order": 2,
        "group": "0489adf761799c8a",
        "width": 4,
        "height": 1,
        "label": "Charging to Full",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Charging to Full",
        "x": 380,
        "y": 740,
        "wires": []
    },
    {
        "id": "923b3265f5a059a7",
        "type": "ui_led",
        "z": "a0153a2235a01066",
        "order": 4,
        "group": "0489adf761799c8a",
        "width": 4,
        "height": 1,
        "label": "Balancing",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Bms Balancing",
        "x": 1060,
        "y": 920,
        "wires": []
    },
    {
        "id": "9119099aef5924b4",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceInterval",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "46191c5740758be0",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceTime",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "876ab6074a82af01",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LastBalance",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 380,
        "wires": [
            [
                "3775f83ceb32f051"
            ]
        ]
    },
    {
        "id": "8d13abf189e782ed",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4a1ad39e0c228d69",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "BalanceNeed",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "eec48c40c128475e",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Info/MaxChargeVoltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Info/MaxChargeVoltage",
            "type": "float",
            "name": "CVL - Charge Voltage Limit (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "c3097bb109292fc4",
                "f0548456bbbfae27"
            ]
        ]
    },
    {
        "id": "c3097bb109292fc4",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Absorption CVL",
        "func": "const AbsorptionThreshold = flow.get(\"AbsorptionThreshold\");\n\nconst cvl = msg.payload;\n\nif (cvl > AbsorptionThreshold) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Requesting Absorption\"});\n    return {payload: 1};\n}\n\nnode.status({fill: \"red\", shape: \"dot\", text: \"Not Requesting Absorption\"});\nreturn {payload: 0};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "2a3c7a97c7504deb",
                "a69a6c6810db1b1d"
            ]
        ]
    },
    {
        "id": "bad182fe5ad53e8e",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "ddcca6f206c0be70",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Balancing",
        "func": "const AbsorptionThreshold = flow.get(\"AbsorptionThreshold\");\n\nconst voltage = msg.payload;\n\nconst balancing = voltage >= AbsorptionThreshold;\n\nif (balancing) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Balancing\"});\n} else {\n    node.status({fill: \"green\", shape: \"ring\", text: \"Idle\"});\n}\n\nreturn {\n    payload: + balancing,  // bool -> int\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "bdd49484fa139c07",
                "c325a2fd5c6095a7"
            ]
        ]
    },
    {
        "id": "67f4f7c6633c8617",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BmsBalancing",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 920,
        "wires": [
            [
                "923b3265f5a059a7"
            ]
        ]
    },
    {
        "id": "3ca1aea2b7d60266",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Save State",
        "info": "",
        "x": 80,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7e42a2588bab852a",
        "type": "file in",
        "z": "a0153a2235a01066",
        "name": "Read balancing_state.yml",
        "filename": "/data/home/nodered/balancing_state.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "d270c34965cde2bd"
            ]
        ]
    },
    {
        "id": "d270c34965cde2bd",
        "type": "yaml",
        "z": "a0153a2235a01066",
        "property": "payload",
        "name": "",
        "x": 750,
        "y": 280,
        "wires": [
            [
                "b46d9cd39e0f36d4"
            ]
        ]
    },
    {
        "id": "b46d9cd39e0f36d4",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "Extract LastBalance",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.LastBalance",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "6a0979e04ecd9686"
            ]
        ]
    },
    {
        "id": "d0301b85f8671845",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "c1374f4e95ee660f"
            ]
        ]
    },
    {
        "id": "c1374f4e95ee660f",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Serialize State",
        "func": "const LastBalance = flow.get(\"LastBalance\");\n\nreturn {\n    payload: {\n        LastBalance,\n    },\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1420,
        "wires": [
            [
                "b5b2aff3bee12061"
            ]
        ]
    },
    {
        "id": "0d0d81337a6c63a8",
        "type": "yaml",
        "z": "a0153a2235a01066",
        "property": "payload",
        "name": "",
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "d6427b9ecace7567"
            ]
        ]
    },
    {
        "id": "d6427b9ecace7567",
        "type": "file",
        "z": "a0153a2235a01066",
        "name": "Write balancing_state.yml",
        "filename": "/data/home/nodered/balancing_state.yml",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5321421c739f4e",
        "type": "delay",
        "z": "a0153a2235a01066",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "7e42a2588bab852a"
            ]
        ]
    },
    {
        "id": "76886a5b99109a57",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Default to current time, but trigger loading state from disk",
        "info": "",
        "x": 230,
        "y": 240,
        "wires": []
    },
    {
        "id": "6a0979e04ecd9686",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Filter Valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 280,
        "wires": [
            [
                "876ab6074a82af01"
            ]
        ]
    },
    {
        "id": "b5b2aff3bee12061",
        "type": "rbe",
        "z": "a0153a2235a01066",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "0d0d81337a6c63a8"
            ]
        ]
    },
    {
        "id": "5933497f39bd3b73",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "Manual Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "7e42a2588bab852a"
            ]
        ]
    },
    {
        "id": "bdd49484fa139c07",
        "type": "rbe",
        "z": "a0153a2235a01066",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 650,
        "y": 920,
        "wires": [
            [
                "f39cb4e620f6587a",
                "67f4f7c6633c8617"
            ]
        ]
    },
    {
        "id": "f39cb4e620f6587a",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Detect Start",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 960,
        "wires": [
            [
                "1c8398f3cab85cb6"
            ]
        ]
    },
    {
        "id": "1c8398f3cab85cb6",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceStartTime",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "c325a2fd5c6095a7",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Balancing for BalanceTime",
        "func": "const balancing = msg.payload;\nconst now = msg.timestamp;\n\nif (balancing == 0) {\n    node.status({fill: \"grey\", shape: \"ring\", text: \"Idle\"});\n    return;\n}\n\nconst BalanceStartTime = flow.get(\"BalanceStartTime\");\nconst BalanceTime = flow.get(\"BalanceTime\");\nconst BalanceTimeMillis = BalanceTime * 60 * 1000;\n\nif (now > BalanceStartTime + BalanceTimeMillis) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Done!\"});\n    return {\n        payload: 0,\n    }\n} else {\n    node.status({fill: \"yellow\", shape: \"dot\", text: \"Balancing...\"});\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1000,
        "wires": [
            [
                "0771e50b5d9a6f16"
            ]
        ]
    },
    {
        "id": "65f2ef9b0f400360",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "0771e50b5d9a6f16",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LastBalance",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "eb47da62594c2ffa",
        "type": "victron-input-custom",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/History/TimeSinceLastFullCharge",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS (0)"
        },
        "pathObj": {
            "path": "/History/TimeSinceLastFullCharge",
            "name": "/History/TimeSinceLastFullCharge",
            "type": "number"
        },
        "name": "",
        "onlyChanges": false,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "51e81b316c9ddcd1"
            ]
        ]
    },
    {
        "id": "c6d19d82cc5abc7c",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Voltage",
            "type": "float",
            "name": "Battery voltage (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 180,
        "y": 1000,
        "wires": [
            [
                "ddcca6f206c0be70"
            ]
        ]
    },
    {
        "id": "51e81b316c9ddcd1",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Convert seconds to date string",
        "func": "const secondsAgo = msg.payload;\n\nconst now = new Date();\nconst last_full = new Date(now.getTime() - secondsAgo * 1000);\n\n// Extracting day, month, and year from the date\nconst day = String(last_full.getDate()).padStart(2, '0');\nconst month = String(last_full.getMonth() + 1).padStart(2, '0'); // Adding 1 because months are zero-based\nconst year = last_full.getFullYear();\n\nconst formatted_last_full = `${day}-${month}-${year}`;\n\nreturn {\n    payload: formatted_last_full,\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "08ad03d2e999060f"
            ]
        ]
    },
    {
        "id": "08ad03d2e999060f",
        "type": "ui_text",
        "z": "a0153a2235a01066",
        "group": "0489adf761799c8a",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "Last Full Date",
        "label": "Last Full Date",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 920,
        "y": 440,
        "wires": []
    },
    {
        "id": "1038f676e6d3d138",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Full",
        "func": "const BMSRequestAbsorption = flow.get(\"BMSRequestAbsorption\");\n\n// Let the batteries continue to balance as long as the BMS wants to\nif (msg.payload >= 99.5 && BMSRequestAbsorption === 0) {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1060,
        "wires": [
            [
                "65f2ef9b0f400360"
            ]
        ]
    },
    {
        "id": "2a3c7a97c7504deb",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Detect BMS Request",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 1260,
        "wires": [
            [
                "bad182fe5ad53e8e"
            ]
        ]
    },
    {
        "id": "a69a6c6810db1b1d",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BMSRequestAbsorption",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "9255448c6aa8ff87",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Trigger balancing from the BMS",
        "info": "",
        "x": 150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f0548456bbbfae27",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeVoltageLimit",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e395f3a1c210a5",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "1038f676e6d3d138"
            ]
        ]
    },
    {
        "id": "46a26c67b0b595f0",
        "type": "victron-input-custom",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Settings/Battery/NominalVoltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS (0)"
        },
        "pathObj": {
            "path": "/Settings/Battery/NominalVoltage",
            "name": "/Settings/Battery/NominalVoltage",
            "type": "number"
        },
        "name": "",
        "onlyChanges": false,
        "x": 240,
        "y": 860,
        "wires": [
            [
                "1211c0daa0aecb0c"
            ]
        ]
    },
    {
        "id": "1211c0daa0aecb0c",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Calculate Absorption Threshold",
        "func": "const system_voltage = msg.payload;\nconst threshold = 1.18125 * system_voltage;  // 14.175 / 28.35V\n\nnode.status({text: threshold});\n\nreturn {\n    payload: threshold,\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 860,
        "wires": [
            [
                "dbafb36232b6d50c"
            ]
        ]
    },
    {
        "id": "dbafb36232b6d50c",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AbsorptionThreshold",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c65e519ce9d5b2be",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "e3e5ad7a2ce38029"
            ]
        ]
    },
    {
        "id": "5434e8e795736a3b",
        "type": "comment",
        "z": "88528a05a79df186",
        "name": "Function to set Multi/Quattro allowed max charge based on incoming Amps and consumption of devices not connected to Multi/Quattro output",
        "info": "",
        "x": 470,
        "y": 1180,
        "wires": []
    },
    {
        "id": "38abfc07b2bc2ce4",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Vessel input W",
        "group": "aed689e284f65765",
        "order": 5,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel input W",
        "label": "W",
        "format": "{{value}}",
        "min": 0,
        "max": "15000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "7000",
        "seg2": "12000",
        "diff": false,
        "className": "",
        "x": 1420,
        "y": 860,
        "wires": []
    },
    {
        "id": "300e3e5c3e1d9298",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Direct Consumers W",
        "group": "aed689e284f65765",
        "order": 8,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Direct Consumers W",
        "label": "W",
        "format": "{{value}}",
        "min": 0,
        "max": "15000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "7000",
        "seg2": "12000",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 980,
        "wires": []
    },
    {
        "id": "30f38fa7e916d7c1",
        "type": "victron-input-gridmeter",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.grid/30",
        "path": "/Ac/L1/Power",
        "serviceObj": {
            "service": "com.victronenergy.grid/30",
            "name": "Vessel Main"
        },
        "pathObj": {
            "path": "/Ac/L1/Power",
            "type": "float",
            "name": "L1 Power (W)"
        },
        "name": "Vessel input W",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 100,
        "y": 860,
        "wires": [
            [
                "38abfc07b2bc2ce4"
            ]
        ]
    },
    {
        "id": "f5b1d0644887c4a0",
        "type": "victron-input-acload",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.acload/30",
        "path": "/Ac/L1/Power",
        "serviceObj": {
            "service": "com.victronenergy.acload/30",
            "name": "Fixed consumers"
        },
        "pathObj": {
            "path": "/Ac/L1/Power",
            "type": "float",
            "name": "L1 Power (W)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "300e3e5c3e1d9298"
            ]
        ]
    },
    {
        "id": "3f98c875aef12543",
        "type": "victron-input-gridmeter",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.grid/30",
        "path": "/Ac/L1/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.grid/30",
            "name": "Vessel Main"
        },
        "pathObj": {
            "path": "/Ac/L1/Voltage",
            "type": "float",
            "name": "L1 Voltage (V)"
        },
        "name": "Vessel input V",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 90,
        "y": 920,
        "wires": [
            [
                "3e8d3ed755604d4d"
            ]
        ]
    },
    {
        "id": "3e8d3ed755604d4d",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Vessel input V",
        "group": "aed689e284f65765",
        "order": 7,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel input V",
        "label": "A",
        "format": "{{value}}",
        "min": "180",
        "max": "250",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "240",
        "diff": false,
        "className": "",
        "x": 1420,
        "y": 920,
        "wires": []
    },
    {
        "id": "2dca1860a24a4811",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Direct Consumers V",
        "group": "aed689e284f65765",
        "order": 10,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Direct Consumers V",
        "label": "A",
        "format": "{{value}}",
        "min": "180",
        "max": "250",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "240",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 800,
        "wires": []
    },
    {
        "id": "d525bf9b911f6172",
        "type": "victron-input-acload",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.acload/30",
        "path": "/Ac/L1/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.acload/30",
            "name": "Fixed consumers"
        },
        "pathObj": {
            "path": "/Ac/L1/Voltage",
            "type": "float",
            "name": "L1 Voltage (V AC)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "2dca1860a24a4811"
            ]
        ]
    },
    {
        "id": "cc6a3907442db878",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Vessel input A",
        "group": "aed689e284f65765",
        "order": 6,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel input A",
        "label": "A",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "32",
        "seg2": "45",
        "diff": false,
        "className": "",
        "x": 1420,
        "y": 480,
        "wires": []
    },
    {
        "id": "806cce656182b735",
        "type": "victron-input-gridmeter",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.grid/30",
        "path": "/Ac/L1/Current",
        "serviceObj": {
            "service": "com.victronenergy.grid/30",
            "name": "Vessel Input"
        },
        "pathObj": {
            "path": "/Ac/L1/Current",
            "type": "float",
            "name": "L1 Current (A)"
        },
        "name": "Vessel input A",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 90,
        "y": 480,
        "wires": [
            [
                "8ae5214dbfe0fee7"
            ]
        ]
    },
    {
        "id": "0ced9aac310ca4a0",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Direct Consumers A",
        "group": "aed689e284f65765",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Direct Consumers A",
        "label": "A",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "32",
        "seg2": "45",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 540,
        "wires": []
    },
    {
        "id": "f2d45eb5c48f9b5e",
        "type": "victron-input-acload",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.acload/30",
        "path": "/Ac/L1/Current",
        "serviceObj": {
            "service": "com.victronenergy.acload/30",
            "name": "Fixed consumers"
        },
        "pathObj": {
            "path": "/Ac/L1/Current",
            "type": "float",
            "name": "L1 Current (A)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "ba429bc75dc99799"
            ]
        ]
    },
    {
        "id": "59e3431312145583",
        "type": "ui_template",
        "z": "88528a05a79df186",
        "group": "aed689e284f65765",
        "name": "",
        "order": 18,
        "width": 9,
        "height": 2,
        "format": "<style>\n  .container {\n    border: 2px solid #aaa;\n    border-radius: 10px;\n    text-align: center;\n    padding: 10px;\n  }\n\n  .rectangle {\n    display: inline-block;\n    width: 48%;\n    border-radius: 10px;\n    margin-bottom: 0.2ex;\n  }\n\n  .rectangle .label {\n    font-weight: bold;\n    margin: 0;\n    color: black;\n  }\n</style>\n\n<div class=\"container\">\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 3 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">On</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 2 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Inverter</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 1 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Charger</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 4 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Off</span>\n    </div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1400,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a255f926f6ad239d",
        "type": "victron-input-digitalinput",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.digitalinput/1",
        "path": "/State",
        "serviceObj": {
            "service": "com.victronenergy.digitalinput/1",
            "name": "Generator"
        },
        "pathObj": {
            "path": "/State",
            "type": "enum",
            "name": "Digital input state",
            "enum": {
                "0": "low",
                "1": "high",
                "2": "off",
                "3": "on",
                "4": "no",
                "5": "yes",
                "6": "open",
                "7": "closed",
                "8": "ok",
                "9": "alarm",
                "10": "running",
                "11": "stopped"
            }
        },
        "initial": "",
        "name": "Shore/Gen Switch state",
        "onlyChanges": false,
        "x": 120,
        "y": 420,
        "wires": [
            [
                "c3798d79a976b835",
                "953709df1259619f"
            ]
        ]
    },
    {
        "id": "50bab84b61cc7a40",
        "type": "ui_template",
        "z": "88528a05a79df186",
        "group": "aed689e284f65765",
        "name": "",
        "order": 19,
        "width": 9,
        "height": 2,
        "format": "<style>\n  .container {\n    border: 2px solid #aaa;\n    border-radius: 10px;\n    text-align: center;\n    padding: 10px;\n  }\n\n  .rectangle {\n    display: inline-block;\n    width: 48%;\n    border-radius: 10px;\n    margin-bottom: 0.2ex;\n  }\n\n  .rectangle .label {\n    font-weight: bold;\n    margin: 0;\n    color: black;\n  }\n</style>\n\n<div class=\"container\">\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 11 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Shore</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 10 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Generator</span>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1400,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8467e940db14fc32",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "16",
        "payloadType": "num",
        "x": 510,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7df225bc26353e28",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 510,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "691d93c9631a5ec6",
        "type": "victron-input-custom",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.vebus/276",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50 (276)"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "name": "/Dc/0/Current",
            "type": "number"
        },
        "name": "Multiplus DC out",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 100,
        "y": 1040,
        "wires": [
            [
                "b9d7e6b4c7162f1c"
            ]
        ]
    },
    {
        "id": "b9d7e6b4c7162f1c",
        "type": "ui_gauge",
        "z": "88528a05a79df186",
        "name": "Multiplus Output DC",
        "group": "aed689e284f65765",
        "order": 12,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Multiplus Output DC",
        "label": "A",
        "format": "{{value}}",
        "min": 0,
        "max": "140",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1fa1c9beb43e9aeb",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "32",
        "payloadType": "num",
        "x": 70,
        "y": 160,
        "wires": [
            [
                "f4ab5da8d5fec837"
            ]
        ]
    },
    {
        "id": "f4ab5da8d5fec837",
        "type": "ui_numeric",
        "z": "88528a05a79df186",
        "name": "Shore Max Current",
        "label": "Shore Max Current",
        "tooltip": "The value represents the maximum the system is allowed to draw when on shore power",
        "group": "aed689e284f65765",
        "order": 4,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "82b4ab47c4cab008"
            ]
        ]
    },
    {
        "id": "229038475b32092d",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "29",
        "payloadType": "num",
        "x": 70,
        "y": 220,
        "wires": [
            [
                "a80f48bf75a3b774"
            ]
        ]
    },
    {
        "id": "a80f48bf75a3b774",
        "type": "ui_numeric",
        "z": "88528a05a79df186",
        "name": "Gen Max Current",
        "label": "Gen Max Current",
        "tooltip": "The value represents the maximum the system is allowed to draw when on shore power",
        "group": "aed689e284f65765",
        "order": 2,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "ca77faed45592358"
            ]
        ]
    },
    {
        "id": "1c46bb1c91c7edb5",
        "type": "ui_multistate_switch",
        "z": "88528a05a79df186",
        "name": "Limit current taken from AC input source",
        "group": "aed689e284f65765",
        "order": 1,
        "width": 9,
        "height": 1,
        "label": "Current Limit Managment",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": true,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Automatic",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Manual",
                "value": "0",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 580,
        "y": 100,
        "wires": [
            [
                "78280472dc8eadba"
            ]
        ]
    },
    {
        "id": "2be4f34f30d1b7d7",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "Default Dynamic current limit",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "1c46bb1c91c7edb5"
            ]
        ]
    },
    {
        "id": "7c7432472a7124bb",
        "type": "comment",
        "z": "88528a05a79df186",
        "name": "User interactive values",
        "info": "",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "130ceee5e67ea979",
        "type": "comment",
        "z": "88528a05a79df186",
        "name": "Dashboard and variables ",
        "info": "",
        "x": 110,
        "y": 360,
        "wires": []
    },
    {
        "id": "b45721f388914b40",
        "type": "comment",
        "z": "88528a05a79df186",
        "name": "Dashboard only nodes",
        "info": "",
        "x": 100,
        "y": 740,
        "wires": []
    },
    {
        "id": "5da6952dbdaa4030",
        "type": "inject",
        "z": "88528a05a79df186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "588a4c51ab7ad74d"
            ]
        ]
    },
    {
        "id": "c3798d79a976b835",
        "type": "debug",
        "z": "88528a05a79df186",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "14ebf5cae2cf3ff4",
        "type": "debug",
        "z": "88528a05a79df186",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1320,
        "wires": []
    },
    {
        "id": "78280472dc8eadba",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CurrentLimitOverride",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "82b4ab47c4cab008",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ShoreMaxCurrent",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ca77faed45592358",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "GenMaxCurrent",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "953709df1259619f",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ShoreGenSwitch",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "50bab84b61cc7a40"
            ]
        ]
    },
    {
        "id": "8ae5214dbfe0fee7",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "VesselInput",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 480,
        "wires": [
            [
                "cc6a3907442db878"
            ]
        ]
    },
    {
        "id": "ba429bc75dc99799",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AcFixed",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 540,
        "wires": [
            [
                "0ced9aac310ca4a0"
            ]
        ]
    },
    {
        "id": "588a4c51ab7ad74d",
        "type": "change",
        "z": "88528a05a79df186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MultiState",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 600,
        "wires": [
            [
                "59e3431312145583"
            ]
        ]
    },
    {
        "id": "e3e5ad7a2ce38029",
        "type": "function",
        "z": "88528a05a79df186",
        "name": "Dynamic charge limiter",
        "func": "//- switch mode current limit: CurrentLimitOverride\n//- Shore Max set Current : ShoreMaxCurrent\n//- Generator Max Current : GenMaxCurrent\n//- Vessel input : VesselInput\n//- AC counter fixed consumers: AcFixed\n//- Switch selector shore/gen: ShoreGenSwitch\n//- Dynamic fields selection of shore/gen based on switch state: ActualLimit\n//- Remaining amps for charger to use: AllowedChargeAmps\n\n// Retrieve values from global context\nvar CurrentLimitOverride = global.get(\"CurrentLimitOverride\");\nvar ShoreMaxCurrent = global.get(\"ShoreMaxCurrent\");\nvar GenMaxCurrent = global.get(\"GenMaxCurrent\");\nvar VesselInput = global.get(\"VesselInput\");\nvar AcFixed = global.get(\"AcFixed\");\nvar ShoreGenSwitch = global.get(\"ShoreGenSwitch\");\nvar ActualLimit; \n\n// Check whether \"CurrentLimitOverride\" is on auto (1) or manual (0), if manual, do nothing; if auto, run the sequence\nif (CurrentLimitOverride === 1) {\n    if (ShoreGenSwitch === 11) {\n        // If ShoreGenSwitch is 1, set ActualLimit equal to ShoreMaxCurrent\n        ActualLimit = ShoreMaxCurrent;\n        \n        // Debugging: Log that \"ShoreMaxCurrent\" is selected as the source for ActualLimit\n     //   node.warn(\"Selected source for ActualLimit: ShoreMaxCurrent\");\n    } else if (ShoreGenSwitch === 10) {\n        // If ShoreGenSwitch is 0, set ActualLimit equal to GenMaxCurrent\n        ActualLimit = GenMaxCurrent;\n        \n        // Debugging: Log that \"GenMaxCurrent\" is selected as the source for ActualLimit\n       //  node.warn(\"Selected source for ActualLimit: GenMaxCurrent\");\n    }\n\n    // Calculate the remaining difference, subtract \"AcFixed\" from \"ActualLimit,\" round to the nearest inferior number, and store the result in global context as \"AllowedChargeAmps\"\n    var AllowedChargeAmps = Math.floor(ActualLimit - AcFixed);\n   // node.warn(\"AllowedChargeAmps: \" + AllowedChargeAmps);\n\n    msg.payload = AllowedChargeAmps;\n} else if (CurrentLimitOverride === 0) {\n    // If \"CurrentLimitOverride\" is in manual mode (0), do nothing and pass the message as is\n    // node.warn(\"System is in manual mode\");\n    msg.payload = null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1240,
        "wires": [
            [
                "14ebf5cae2cf3ff4",
                "5df891f0e9086713"
            ]
        ]
    },
    {
        "id": "5df891f0e9086713",
        "type": "victron-output-vebus",
        "z": "88528a05a79df186",
        "service": "com.victronenergy.vebus/276",
        "path": "/Ac/ActiveIn/CurrentLimit",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/CurrentLimit",
            "type": "float",
            "name": "Active input current limit (A)",
            "writable": true
        },
        "name": "Current limit Multi",
        "onlyChanges": false,
        "x": 1250,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5870ed0a978fa7e4",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Function Debug",
        "info": "",
        "x": 100,
        "y": 1200,
        "wires": []
    },
    {
        "id": "db92701a3168e85b",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Debug variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "c1427c9e00958fbe"
            ]
        ]
    },
    {
        "id": "c1427c9e00958fbe",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "variables export",
        "func": "// Retrieve the variables from the global context\nvar MultiSOCmgmt = global.get(\"MultiSOCmgmt\");\nvar MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\nvar MaxSoc = global.get(\"MaxSoc\");\nvar BattSoc = global.get(\"BattSoc\");\nvar MultiState = global.get(\"MultiState\");\nvar BalanceNeed = global.get(\"BalanceNeed\");\nvar ShoreGenSwitch = global.get(\"ShoreGenSwitch\");\nvar MultiRestartSoc = global.get(\"MultiRestartSoc\");\nvar CycleMgmt = global.get(\"CycleMgmt\");\n\n\n// Create an object to hold the variables\nvar variables = {\n    MultiSOCmgmt: MultiSOCmgmt,\n    MultiChargeEnabled: MultiChargeEnabled,\n    MaxSoc: MaxSoc,\n    BattSoc: BattSoc,\n    MultiState: MultiState,\n    BalanceNeed: BalanceNeed,\n    ShoreGenSwitch: ShoreGenSwitch,\n    CycleMgmt: CycleMgmt,\n    MultiRestartSoc: MultiRestartSoc\n};\n\n// Output the variables as a payload\nmsg.payload = variables;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1240,
        "wires": [
            [
                "41855fb55b1cc5ad"
            ]
        ]
    },
    {
        "id": "41855fb55b1cc5ad",
        "type": "debug",
        "z": "d2855c6ff5fe1d8c",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e5277738d6d2b828",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Set Charging enabled",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 1640,
        "wires": [
            [
                "e096b110d010bf83"
            ]
        ]
    },
    {
        "id": "e096b110d010bf83",
        "type": "ui_button",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "group": "2d51d403d65e5320",
        "order": 23,
        "width": 9,
        "height": 1,
        "passthru": true,
        "label": "Reset Charging Enabled",
        "tooltip": "If, for any reason you would want to interrupt the cycle between maximum state of charge and restart state of charge to force the system into charging again (while on shore power) ",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 750,
        "y": 1640,
        "wires": [
            [
                "77c7fba52bfcbb21",
                "a6a59e825a4d6692",
                "47a8a47fc48daa1d"
            ]
        ]
    },
    {
        "id": "77c7fba52bfcbb21",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Multi ChargeEnabled to Global",
        "func": "// Retrieve the value from the input node's payload\nvar MultiChargeEnabled = msg.payload;\n\n// Set the value as a global variable\nglobal.set(\"MultiChargeEnabled\", MultiChargeEnabled);\n\n// Pass the message to the next node (if needed)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "1482d67ad29cd7ad",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Set to 0 for debug",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 1700,
        "wires": [
            [
                "e096b110d010bf83"
            ]
        ]
    },
    {
        "id": "6713940b2ce12ea8",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Store Cycle Restart SOC to global",
        "func": "// retrieve the state of CycleMgmt from global storage \n// retrieve the values from StorRestartSoc and SailRestartSoc from global storage\n// If CycleMgmt is 1 store null as MultiRestartSoc, if CycleMgmt is 2 store StorRestartSoc as MultiRestartSoc, if CycleMgmt is 3 store SailRestartSoc as MultiRestartSoc\n\n\n\n// retrieve the state of CycleMgmt from global storage\nvar CycleMgmt = global.get(\"CycleMgmt\");\n\n// retrieve the values from StorRestartSoc and SailRestartSoc from global storage\nvar StorRestartSoc = global.get(\"StorRestartSoc\");\nvar SailRestartSoc = global.get(\"SailRestartSoc\");\n\n// Declare MultiRestartSoc variable\nvar MultiRestartSoc;\n\n// Debug each retrieved value\n// node.warn(\"CycleMgmt: \" + CycleMgmt);\n// node.warn(\"StorRestartSoc: \" + StorRestartSoc);\n// node.warn(\"SailRestartSoc: \" + SailRestartSoc);\n// If CycleMgmt is 1, store null as MultiRestartSoc\nif (CycleMgmt === 1) {\n    MultiRestartSoc = null;\n//    node.warn(\"Value to be stored in MultiRestartSoc: null\");\n} \n// If CycleMgmt is 2, store StorRestartSoc as MultiRestartSoc\nelse if (CycleMgmt === 2) {\n    MultiRestartSoc = StorRestartSoc;\n//    node.warn(\"Value to be stored in MultiRestartSoc: \" + StorRestartSoc);\n} \n// If CycleMgmt is 3, store SailRestartSoc as MultiRestartSoc\nelse if (CycleMgmt === 3) {\n    MultiRestartSoc = SailRestartSoc;\n //   node.warn(\"Value to be stored in MultiRestartSoc: \" + SailRestartSoc);\n}\n\n// Store MultiRestartSoc in the global context\nglobal.set(\"MultiRestartSoc\", MultiRestartSoc);\n// node.warn(\"Value to be stored in MultiRestartSoc: \" + MultiRestartSoc);\n// Pass the message to the next node\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "a51f92c7f1867893",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Store MaxSoc to global",
        "func": "// retrieve the state of CycleMgmt from global storage \n// retrieve the values from StorMaxSoc and SailMaxSoc from global storage\n// If CycleMgmt is 1 store null as MaxSoc, if CycleMgmt is 2 store StorMaxSoc as MaxSoc, if CycleMgmt is 3 store SailMaxSoc as MaxSoc\n\n\n// Retrieve the state of CycleMgmt from global storage\nvar CycleMgmt = global.get(\"CycleMgmt\");\n\n// Retrieve the values from StorMaxSoc and SailMaxSoc from global storage\nvar StorMaxSoc = global.get(\"StorMaxSoc\");\nvar SailMaxSoc = global.get(\"SailMaxSoc\");\n\n// Debug each retrieved value\n// node.warn(\"CycleMgmt: \" + CycleMgmt);\n// node.warn(\"StorMaxSoc: \" + StorMaxSoc);\n// node.warn(\"SailMaxSoc: \" + SailMaxSoc);\n\nvar MaxSoc = null; // Default value as null\n\n// If CycleMgmt is 1, store null as MaxSoc\nif (CycleMgmt === 1) {\n    MaxSoc = null;\n //   node.warn(\"Value to be stored in MaxSoc: null\");\n} \n// If CycleMgmt is 2, store StorMaxSoc as MaxSoc\nelse if (CycleMgmt === 2) {\n    MaxSoc = StorMaxSoc;\n//    node.warn(\"Value to be stored in MaxSoc: \" + StorMaxSoc);\n} \n// If CycleMgmt is 3, store SailMaxSoc as MaxSoc\nelse if (CycleMgmt === 3) {\n    MaxSoc = SailMaxSoc;\n//    node.warn(\"Value to be stored in MaxSoc: \" + SailMaxSoc);\n}\n\n// Store MaxSoc in the global context\nglobal.set(\"MaxSoc\", MaxSoc);\n// node.warn(\"Value to be stored in MaxSoc: \" + MaxSoc);\n// Pass the message to the next node \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "0fd954721924231b",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "6713940b2ce12ea8"
            ]
        ]
    },
    {
        "id": "1abe231616e3aa60",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1360,
        "wires": [
            [
                "a51f92c7f1867893"
            ]
        ]
    },
    {
        "id": "a6a59e825a4d6692",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "ChargeEnabledSol to Global",
        "func": "// Retrieve the value from the input node's payload\nvar ChargeEnabledSol = msg.payload;\n\n// Set the value as a global variable\nglobal.set(\"ChargeEnabledSol\", ChargeEnabledSol);\n\n// Pass the message to the next node (if needed)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "47a8a47fc48daa1d",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Alternator ChargeEnabled to Global",
        "func": "// Retrieve the value from the input node's payload\nvar AltChargeEnabled = msg.payload;\n\n// Set the value as a global variable\nglobal.set(\"AltChargeEnabled\", AltChargeEnabled);\n\n// Pass the message to the next node (if needed)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "5a28a777b8e23ea1",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Inject Cycle mgmt Auto",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "1987d79b4b49ed81"
            ]
        ]
    },
    {
        "id": "d957038887770b9a",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "User interactive Local Values",
        "info": "Auto = 1\nManual = 0",
        "x": 140,
        "y": 240,
        "wires": []
    },
    {
        "id": "24f28037501616c0",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Dashboard nodes",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "ce86be16270c0d94",
        "type": "victron-input-vebus",
        "z": "d2855c6ff5fe1d8c",
        "service": "com.victronenergy.vebus/276",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Switch Position",
            "enum": {
                "1": "Charger Only",
                "2": "Inverter Only",
                "3": "On",
                "4": "Off"
            }
        },
        "initial": "",
        "name": "Multiplus state",
        "onlyChanges": false,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "bf03eb793443f2dc"
            ]
        ]
    },
    {
        "id": "9916b1ee0c1a1e61",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "SailRestartSoc",
        "payloadType": "global",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "38dadb3525bc4d5b"
            ]
        ]
    },
    {
        "id": "38dadb3525bc4d5b",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Restart SOC",
        "label": "Sailing Restart SoC",
        "tooltip": "This value represents the lower state of charge at wich we will start charging again. This value is only used when connected on shore power to have the batteries perform small cycles and not remain fully charged as this results in damage to the cells. ",
        "group": "2d51d403d65e5320",
        "order": 8,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "30",
        "max": "90",
        "step": "5",
        "className": "",
        "x": 400,
        "y": 500,
        "wires": [
            [
                "d2d8a2d5abc671c2"
            ]
        ]
    },
    {
        "id": "5977a08cd7ea3ac7",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Max SOC",
        "label": "Storage Max SoC",
        "tooltip": "This value sets the maximum threshold of the battery charge is %. Once reached, charging sources will stop.",
        "group": "2d51d403d65e5320",
        "order": 5,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "40",
        "max": "80",
        "step": "5",
        "className": "",
        "x": 390,
        "y": 600,
        "wires": [
            [
                "afd91e32e314f86f"
            ]
        ]
    },
    {
        "id": "46414d1d40677bbf",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "StorMaxSoc",
        "payloadType": "global",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "5977a08cd7ea3ac7"
            ]
        ]
    },
    {
        "id": "7a2edd39b1cd2de7",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "67fa06e3caa3daf9"
            ]
        ]
    },
    {
        "id": "79a93b0453fdb9f2",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "StorRestartSoc",
        "payloadType": "global",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "8eec334b7bd645ab"
            ]
        ]
    },
    {
        "id": "8eec334b7bd645ab",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Restart SOC",
        "label": "Storage Restart SoC",
        "tooltip": "This value represents the lower state of charge at wich we will start charging again. This value is only used when connected on shore power to have the batteries perform small cycles and not remain fully charged as this results in damage to the cells. ",
        "group": "2d51d403d65e5320",
        "order": 6,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "30",
        "max": "55",
        "step": "5",
        "className": "",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "265293601f0728eb"
            ]
        ]
    },
    {
        "id": "fb8ce8ac918c8ba7",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Max SOC",
        "label": "Sailing Max Soc",
        "tooltip": "This value sets the maximum threshold of the battery charge is %. Once reached, charging sources will stop.",
        "group": "2d51d403d65e5320",
        "order": 7,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "80",
        "max": "99",
        "step": "1",
        "className": "",
        "x": 390,
        "y": 640,
        "wires": [
            [
                "38a18d369df71dd4"
            ]
        ]
    },
    {
        "id": "acb0b74e3193428e",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "global.SailMaxSoc",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SailMaxSoc",
        "payloadType": "global",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "fb8ce8ac918c8ba7"
            ]
        ]
    },
    {
        "id": "049fe4421ee673ae",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Select MaxSoc",
        "func": "const CycleMgmt = global.get(\"CycleMgmt\");\nconst StorMaxSoc = global.get(\"StorMaxSoc\");\nconst SailMaxSoc = global.get(\"SailMaxSoc\");\n\nconst CycleMgmtModes = Object.freeze({\n    OFF: 1,\n    STORAGE: 2,\n    SAILING: 3,\n});\n\nlet MaxSoc = null;\n\nif (CycleMgmt === CycleMgmtModes.OFF) {\n    MaxSoc = null;\n} else if (CycleMgmt === CycleMgmtModes.STORAGE) {\n    MaxSoc = StorMaxSoc;\n} else if (CycleMgmt === CycleMgmtModes.SAILING) {\n    MaxSoc =  SailMaxSoc;\n}\n\nnode.status({text: MaxSoc});\nreturn {\n    payload: MaxSoc,\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "084c75a90bf0b591"
            ]
        ]
    },
    {
        "id": "e92ef072134955f3",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "049fe4421ee673ae"
            ]
        ]
    },
    {
        "id": "1987d79b4b49ed81",
        "type": "ui_multistate_switch",
        "z": "d2855c6ff5fe1d8c",
        "name": "Multiplus Management",
        "group": "2d51d403d65e5320",
        "order": 3,
        "width": 9,
        "height": 1,
        "label": "Multiplus Management",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": true,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Automatic",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Manual",
                "value": "0",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "ee202e80ed9e3ddc"
            ]
        ]
    },
    {
        "id": "67fa06e3caa3daf9",
        "type": "ui_multistate_switch",
        "z": "d2855c6ff5fe1d8c",
        "name": "Cycle Management setting",
        "group": "2d51d403d65e5320",
        "order": 1,
        "width": 9,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Storage",
                "value": "2",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "Sailing",
                "value": "3",
                "valueType": "num",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 400,
        "y": 360,
        "wires": [
            [
                "5df4336f66d2270b"
            ]
        ]
    },
    {
        "id": "bf03eb793443f2dc",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiState",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ee202e80ed9e3ddc",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiSOCmgmt",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5df4336f66d2270b",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CycleMgmt",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "265293601f0728eb",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d2d8a2d5abc671c2",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "afd91e32e314f86f",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "38a18d369df71dd4",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "084c75a90bf0b591",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7406165bb0b4854d",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "5edc41e7ca6a3b36"
            ]
        ]
    },
    {
        "id": "5edc41e7ca6a3b36",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Select MultiRestartSoc",
        "func": "const CycleMgmt = global.get(\"CycleMgmt\");\nconst StorRestartSoc = global.get(\"StorRestartSoc\");\nconst SailRestartSoc = global.get(\"SailRestartSoc\");\n\nconst CycleMgmtModes = Object.freeze({\n    OFF: 1,\n    STORAGE: 2,\n    SAILING: 3,\n});\n\nlet MultiRestartSoc = null;\n\nif (CycleMgmt === CycleMgmtModes.OFF) {\n    MultiRestartSoc = null;\n} else if (CycleMgmt === CycleMgmtModes.STORAGE) {\n    MultiRestartSoc = StorRestartSoc;\n} else if (CycleMgmt === CycleMgmtModes.SAILING) {\n    MultiRestartSoc =  SailRestartSoc;\n}\n\nnode.status({text: MultiRestartSoc});\nreturn {\n    payload: MultiRestartSoc,\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "f46b27d8942deba5"
            ]
        ]
    },
    {
        "id": "f46b27d8942deba5",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "87b2240eaed6c78a",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MultiChargeEnabled",
        "payloadType": "global",
        "x": 200,
        "y": 820,
        "wires": [
            [
                "6baec025b7409eda"
            ]
        ]
    },
    {
        "id": "a5e415478fddb578",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Set MultiChargeEnabled based on SoC",
        "func": "const ChargeToFull = global.get(\"ChargeToFull\");\nconst MultiState = global.get(\"MultiState\");\nconst BattSoc = global.get(\"BattSoc\");\nconst MaxSoc = global.get(\"MaxSoc\");\nconst MultiRestartSoc = global.get(\"MultiRestartSoc\");\nlet MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\n\nconst MultiModes = Object.freeze({\n    CHARGER_ONLY: 1,\n    INVERTER_ONLY: 2,\n    ON: 3,\n    OFF: 4,\n});\n\nif (MultiChargeEnabled === 0) {\n    if (ChargeToFull === 1) {\n        MultiChargeEnabled = 1;\n    }\n    if (BattSoc <= MultiRestartSoc) {\n        MultiChargeEnabled = 1;\n    }\n} else if (MultiChargeEnabled === 1) {\n    if (BattSoc >= MaxSoc) {\n        if (ChargeToFull === 1) {\n            node.status({fill: \"yellow\", shape: \"dot\", text: \"Balancing\"});\n            return;\n        }\n        MultiChargeEnabled = 0;\n    }\n} else if (MultiChargeEnabled === undefined) {\n    node.warn(\"Startup: Guessing MultiChargeEnabled from MultiState: \" + MultiState);\n    if (MultiState === MultiModes.INVERTER_ONLY\n        || MultiState === MultiModes.OFF) {\n        MultiChargeEnabled = 0;\n    } else if (MultiState === MultiModes.CHARGER_ONLY\n               || MultiState == MultiModes.ON) {\n        MultiChargeEnabled = 1;\n    }\n}\n\nif (MultiChargeEnabled === 1) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Enable\"});\n} else {\n    node.status({fill: \"red\", shape: \"dot\", text: \"Disable\"});\n}\n\nreturn {\n    payload: MultiChargeEnabled,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 880,
        "wires": [
            [
                "a061d7684091f4c1"
            ]
        ]
    },
    {
        "id": "f980f9d786269cb1",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "a5e415478fddb578"
            ]
        ]
    },
    {
        "id": "698e518d68d73c8a",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Charge Cycle Enabled. Determine Charge status from SoC and Balancing",
        "info": "",
        "x": 300,
        "y": 760,
        "wires": []
    },
    {
        "id": "6baec025b7409eda",
        "type": "ui_led",
        "z": "d2855c6ff5fe1d8c",
        "order": 10,
        "group": "2d51d403d65e5320",
        "width": 3,
        "height": 1,
        "label": "AC Charging Enabled",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Multiplus Charging Enabled",
        "x": 480,
        "y": 820,
        "wires": []
    },
    {
        "id": "a061d7684091f4c1",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "c8ce07bb531f28cb",
        "type": "victron-output-vebus",
        "z": "d2855c6ff5fe1d8c",
        "service": "com.victronenergy.vebus/276",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Switch Position",
            "remarks": "<p>Note that <tt>/ModeIsAdjustable</tt> needs to be set to 1.</p> ",
            "enum": {
                "1": "Charger Only",
                "2": "Inverter Only",
                "3": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 600,
        "y": 1060,
        "wires": []
    },
    {
        "id": "deb41ea4feccb814",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Control Multiplus Mode",
        "func": "const MultiSOCmgmt = global.get(\"MultiSOCmgmt\");\nlet MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\nconst MultiState = global.get(\"MultiState\");\n\nconst MultiModes = Object.freeze({\n    CHARGER_ONLY: 1,\n    INVERTER_ONLY: 2,\n    ON: 3,\n    OFF: 4,\n});\n\nif (MultiSOCmgmt !== 1) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Management Disabled\"});\n    return;\n}\n\nif (MultiChargeEnabled === 0) {\n    if (MultiState === MultiModes.CHARGER_ONLY) {\n        node.status({fill: \"red\", shape: \"dot\", text: \"Off\"});\n        return {\n            payload: MultiModes.OFF,\n        };\n    } else if (MultiState === MultiModes.ON) {\n        node.status({fill: \"red\", shape: \"dot\", text: \"Charging off\"});\n        return {\n            payload: MultiModes.INVERTER_ONLY,\n        };\n    }\n} else if (MultiChargeEnabled === 1) {\n    if (MultiState === MultiModes.OFF) {\n        node.status({fill: \"green\", shape: \"dot\", text: \"On\"});\n        return {\n            payload: MultiModes.CHARGER_ONLY,\n        };\n    } else if (MultiState === MultiModes.INVERTER_ONLY) {\n        node.status({fill: \"green\", shape: \"dot\", text: \"Charging on\"});\n        return {\n            payload: MultiModes.ON,\n        };\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1060,
        "wires": [
            [
                "c8ce07bb531f28cb"
            ]
        ]
    },
    {
        "id": "4de1a353c38c659a",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "deb41ea4feccb814"
            ]
        ]
    },
    {
        "id": "2a69e133e2c7e75c",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Control MultiPlus from MultiChargeEnabled",
        "info": "",
        "x": 180,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a9990c108185fa91",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/290",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/290",
            "name": "Solar Front portboard"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 700,
        "wires": []
    },
    {
        "id": "f4eac957b349a9cf",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/293",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/293",
            "name": "Solar Rear port side"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 640,
        "wires": []
    },
    {
        "id": "4649d1d0ac98299d",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/288",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/288",
            "name": "Solar Rear port middle"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 580,
        "wires": []
    },
    {
        "id": "7aeaa83f6eb21266",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/291",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/291",
            "name": "Solar Front starboard"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 520,
        "wires": []
    },
    {
        "id": "7812c388a7c4a89c",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "Solar Rear star side"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 760,
        "wires": []
    },
    {
        "id": "0a5829d3b7be0230",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/292",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/292",
            "name": "Solar Rear star middle"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1310,
        "y": 820,
        "wires": []
    },
    {
        "id": "6689dc14a9c5d257",
        "type": "comment",
        "z": "81c7a8a38f0557f0",
        "name": "Function to manage the solar array based on conditions like battery SOC and balance need. On, Off, or cycle battery on the dashboard",
        "info": "",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "6bc85d04f1e08a53",
        "type": "debug",
        "z": "81c7a8a38f0557f0",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 860,
        "wires": []
    },
    {
        "id": "2016e39ae85215a4",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ChargeEnabledSol",
        "payloadType": "global",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "4ae06a54ee251db9"
            ]
        ]
    },
    {
        "id": "b2d7a81745cd8a06",
        "type": "function",
        "z": "81c7a8a38f0557f0",
        "name": "Determine ChargeEnabledSol based on SoC",
        "func": "const BattSoc = global.get(\"BattSoc\");\nconst ChargeToFull = global.get(\"ChargeToFull\");\nconst SailMaxSoc = global.get(\"SailMaxSoc\");\nconst SolarMgmt = flow.get(\"SolarMgmt\");\n\nconst SolarMgmtStates = Object.freeze({\n    ON: 1,\n    OFF: 4,\n    AUTO: 20,\n});\n\nif (SolarMgmt === SolarMgmtStates.OFF) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Manual Disable\"});\n    return {\n        payload: 0,\n    }\n}\nif (BattSoc > SailMaxSoc) {\n    if (ChargeToFull === 1) {\n        node.status({fill: \"yellow\", shape: \"dot\", text: \"Charging to Full\"});\n        return {\n            payload: 1,\n        };\n    }\n    node.status({fill: \"red\", shape: \"dot\", text: \"Disable\"});\n    return {\n        payload: 0,\n    };\n}\n\nnode.status({fill: \"green\", shape: \"dot\", text: \"Enable\"});\nreturn {\n    payload: 1,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "10f8087979c6514b"
            ]
        ]
    },
    {
        "id": "81069249e14b1f81",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "b2d7a81745cd8a06"
            ]
        ]
    },
    {
        "id": "e02d59ba112ba183",
        "type": "ui_gauge",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 11,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Battery Voltage",
        "label": "V",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "30",
        "colors": [
            "#f2071f",
            "#00b500",
            "#f2071f"
        ],
        "seg1": "23.5",
        "seg2": "28.5",
        "diff": false,
        "className": "",
        "x": 420,
        "y": 60,
        "wires": []
    },
    {
        "id": "13738945c006a257",
        "type": "victron-input-battery",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Voltage",
            "type": "float",
            "name": "Battery voltage (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 180,
        "y": 60,
        "wires": [
            [
                "e02d59ba112ba183"
            ]
        ]
    },
    {
        "id": "4a471ea12ff66b39",
        "type": "ui_gauge",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 13,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Battery Current",
        "label": "A",
        "format": "{{value | number:2}}",
        "min": "-300",
        "max": "300",
        "colors": [
            "#163fe3",
            "#00b500",
            "#f0740f"
        ],
        "seg1": "20",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "a44786b2ca271e8d",
        "type": "victron-input-battery",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Cavendish BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "4a471ea12ff66b39"
            ]
        ]
    },
    {
        "id": "3f98e820de81c288",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "Inject Solar ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "c80504f9e191427e"
            ]
        ]
    },
    {
        "id": "4ae06a54ee251db9",
        "type": "ui_led",
        "z": "81c7a8a38f0557f0",
        "order": 11,
        "group": "2d51d403d65e5320",
        "width": 3,
        "height": 1,
        "label": "Solar Chg Enabled",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Solar Charging Enabled",
        "x": 450,
        "y": 240,
        "wires": []
    },
    {
        "id": "c80504f9e191427e",
        "type": "ui_multistate_switch",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "2d51d403d65e5320",
        "order": 2,
        "width": 9,
        "height": 1,
        "label": "Solar",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Auto",
                "value": "20",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "On",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Off",
                "value": "4",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "606f9bbc25ce01b4"
            ]
        ]
    },
    {
        "id": "606f9bbc25ce01b4",
        "type": "change",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SolarMgmt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "10f8087979c6514b",
        "type": "change",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeEnabledSol",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e17bceca8d9aec8f",
        "type": "function",
        "z": "81c7a8a38f0557f0",
        "name": "Set MPPT Mode",
        "func": "const SolarMgmt = flow.get(\"SolarMgmt\");\nconst ChargeEnabledSol = flow.get(\"ChargeEnabledSol\");\n\nconst SolarMgmtStates = Object.freeze({\n    ON: 1,\n    OFF: 4,\n    AUTO: 20,\n});\n\nlet SolarState;\n\nif (SolarMgmt === SolarMgmtStates.OFF || SolarMgmt === SolarMgmtStates.ON) {\n    SolarState = SolarMgmt;\n} else if (SolarMgmt === SolarMgmtStates.AUTO) {\n    if (ChargeEnabledSol === 0) {\n        SolarState = SolarMgmtStates.OFF;\n    } else if (ChargeEnabledSol === 1) {\n        SolarState = SolarMgmtStates.ON;\n    }\n}\n\nif (SolarState === SolarMgmtStates.ON) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"On\"});\n} else if (SolarState === SolarMgmtStates.OFF) {\n    node.status({fill: \"red\", shape: \"dot\", text: \"Off\"});\n}\n\nreturn {\n    payload: SolarState,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 560,
        "wires": [
            [
                "7aeaa83f6eb21266",
                "4649d1d0ac98299d",
                "f4eac957b349a9cf",
                "6bc85d04f1e08a53",
                "a9990c108185fa91",
                "7812c388a7c4a89c",
                "0a5829d3b7be0230"
            ]
        ]
    },
    {
        "id": "a035f5edc4d2b344",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "e17bceca8d9aec8f"
            ]
        ]
    },
    {
        "id": "db442d095bcdbcf4",
        "type": "victron-input-alternator",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.alternator/279",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.alternator/279",
            "name": "Cavendish STBD Alt"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "Stbd Alternator A",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "3a4278603e0daf75"
            ]
        ]
    },
    {
        "id": "3a4278603e0daf75",
        "type": "ui_gauge",
        "z": "11a4bfd096900c1f",
        "name": "Stbd Alternator Charge",
        "group": "2d51d403d65e5320",
        "order": 21,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Stbd Alternator Charge",
        "label": "A",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "110",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 260,
        "wires": []
    },
    {
        "id": "50c4921f2f9b7d05",
        "type": "ui_gauge",
        "z": "11a4bfd096900c1f",
        "name": "Port Alternator Charge",
        "group": "2d51d403d65e5320",
        "order": 19,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Port Alternator Charge",
        "label": "A",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "110",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 320,
        "wires": []
    },
    {
        "id": "0b32455328e3ba1d",
        "type": "victron-input-dcsource",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.dcsource/279",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.dcsource/279",
            "name": "Cavendish PORT Alt"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "Port Alternator A",
        "onlyChanges": false,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "50c4921f2f9b7d05"
            ]
        ]
    },
    {
        "id": "66756d6406d7b3fc",
        "type": "comment",
        "z": "11a4bfd096900c1f",
        "name": "Dashboard ",
        "info": "",
        "x": 60,
        "y": 220,
        "wires": []
    },
    {
        "id": "29b09630e60ab796",
        "type": "victron-input-alternator",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.alternator/279",
        "path": "/Dc/0/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.alternator/279",
            "name": "Cavendish STBD Alt"
        },
        "pathObj": {
            "path": "/Dc/0/Temperature",
            "type": "float",
            "name": "Battery temperature (°C)"
        },
        "name": "Port Alternator T°",
        "onlyChanges": false,
        "x": 100,
        "y": 520,
        "wires": [
            [
                "55bc0e079bb67f60"
            ]
        ]
    },
    {
        "id": "47d4c2e0c46144a2",
        "type": "victron-input-dcsource",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.dcsource/279",
        "path": "/Dc/0/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.dcsource/279",
            "name": "Cavendish PORT Alt"
        },
        "pathObj": {
            "path": "/Dc/0/Temperature",
            "type": "float",
            "name": "Battery temperature (°C)"
        },
        "name": "Port Alternator T°",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "efdc66b7fac0c642"
            ]
        ]
    },
    {
        "id": "6341814816a12081",
        "type": "victron-input-relay",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/0/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Relay/0/State",
            "type": "enum",
            "name": "Venus relay 1 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            }
        },
        "initial": "",
        "name": "Alternator Relay State",
        "onlyChanges": false,
        "x": 120,
        "y": 580,
        "wires": [
            [
                "3e7d4bc4af3d489a"
            ]
        ]
    },
    {
        "id": "84456011fc12386f",
        "type": "comment",
        "z": "11a4bfd096900c1f",
        "name": "Values Retrieved from Victron nodes",
        "info": "",
        "x": 160,
        "y": 400,
        "wires": []
    },
    {
        "id": "8df039a76d53a64a",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "Default MaxTemp Alternators",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "b0c44a9f06b889de"
            ]
        ]
    },
    {
        "id": "b0c44a9f06b889de",
        "type": "ui_numeric",
        "z": "11a4bfd096900c1f",
        "name": "Alternator Max Temp",
        "label": "Alternator Max Temp",
        "tooltip": "This defines at what temperature measured on the alternators we will stop the regulators. Safety measure to avoid damaging the alternators",
        "group": "2d51d403d65e5320",
        "order": 17,
        "width": 9,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "90",
        "max": "130",
        "step": "5",
        "className": "",
        "x": 520,
        "y": 100,
        "wires": [
            [
                "a271ea7a7a548684"
            ]
        ]
    },
    {
        "id": "44c91b72d0646318",
        "type": "function",
        "z": "11a4bfd096900c1f",
        "name": "ChargeEnabled feedback",
        "func": "\n// Retrieve ChargeEnabled from the global context\nvar AltChargeEnabled = flow.get(\"AltChargeEnabled\");\n\n// Output 0 or 1 based on the value of AltChargeEnabled\nif (AltChargeEnabled === 1) {\n    msg.payload = 1; // Output 1 if AltChargeEnabled is 1\n} else {\n    msg.payload = 0; // Output 0 for any other value of ChargeEnabled\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "b67bd6b82b7b3a0d",
        "type": "ui_led",
        "z": "11a4bfd096900c1f",
        "order": 9,
        "group": "2d51d403d65e5320",
        "width": 3,
        "height": 1,
        "label": "Alt Charging Enabled",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Alt Charging Enabled",
        "x": 1420,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0680c180b5d0d284",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 700,
        "wires": [
            [
                "44c91b72d0646318"
            ]
        ]
    },
    {
        "id": "acb1b23240c6a452",
        "type": "function",
        "z": "11a4bfd096900c1f",
        "name": "Reset ChargeEnabled based on SOC",
        "func": "// Retrieve values from global context\nvar AltChargeEnabled = flow.get(\"AltChargeEnabled\");\nvar MultiRestartSoc = global.get(\"MultiRestartSoc\");\nvar BattSoc = global.get(\"BattSoc\");\n\n// Check if ChargeEnabled is 0\nif (AltChargeEnabled === 0) {\n    // Compare BattSoc to RestartSOC\n    if (BattSoc <= MultiRestartSoc) {\n        // Set ChargeEnabled to 1\n        global.set(\"AltChargeEnabled\", 1);\n    }\n}\n\n// node.warn(\"ChargeEnabled: \" + ChargeEnabled);\n// node.warn(\"RestartSOC: \" + RestartSOC);\n// node.warn(\"BattSoc: \" + BattSoc);\n\n// Pass the message to the next node (if needed)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "3ec2ca4a79c5e672",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 740,
        "wires": [
            [
                "acb1b23240c6a452"
            ]
        ]
    },
    {
        "id": "38831cfa11339630",
        "type": "comment",
        "z": "11a4bfd096900c1f",
        "name": "Alternator Charge Enabled",
        "info": "",
        "x": 110,
        "y": 660,
        "wires": []
    },
    {
        "id": "6bad76ae860ca9d0",
        "type": "function",
        "z": "11a4bfd096900c1f",
        "name": "Alternator Managment",
        "func": "// Alternator Management Function\n// Retrieve the values from the global context\nconst AltSOCmgmt = flow.get(\"AltSOCmgmt\");\nconst PortAltTemp = flow.get(\"PortAltTemp\");\nconst StbdAltTemp = flow.get(\"StbdAltTemp\");\nconst AltMaxTemp = flow.get(\"AltMaxTemp\");\nconst BattSoc = global.get(\"BattSoc\");\nconst MaxSoc = global.get(\"MaxSoc\");\nconst MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\nlet AlternatorState = flow.get(\"AlternatorState\");\nlet AltChargeEnabled = global.get(\"AltChargeEnabled\");\n\n\nlet tempAlternatorState = AlternatorState;\n\n// Add conditions based on temperatures before running the function:\n// If PortAltTemp or StbdAltTemp are bigger than AltMaxTemp, stop function output 0. If PortAltTemp and StbdAltTemp are smaller than AltMaxTemp, continue function\nif (PortAltTemp > AltMaxTemp || StbdAltTemp > AltMaxTemp) {\n    AlternatorState = 0;\n} else if (PortAltTemp < AltMaxTemp && StbdAltTemp < AltMaxTemp) {\n    if (AltSOCmgmt === 0) {\n        AlternatorState = 0;\n    } else if (AltSOCmgmt === 1) {\n        if (AltChargeEnabled === 0) {\n            AlternatorState = 0;\n        } else if (AltChargeEnabled === 1) {\n            if (MultiChargeEnabled === 0) {\n                if (BattSoc < MaxSoc) {\n                    AlternatorState = 1;\n                } else {\n                    AlternatorState = 0;\n\n                    AltChargeEnabled = 0;\n                    global.set(\"AltChargeEnabled\", AltChargeEnabled);\n                }\n            } else if (MultiChargeEnabled === 1) {\n                AlternatorState = 1;\n            }\n        }\n    }\n}\n\nmsg.payload = AlternatorState;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 960,
        "wires": [
            [
                "417922e8977e855b",
                "b67bd6b82b7b3a0d",
                "a73efdb8ceac55af"
            ]
        ]
    },
    {
        "id": "417922e8977e855b",
        "type": "victron-output-relay",
        "z": "11a4bfd096900c1f",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/1/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus device"
        },
        "pathObj": {
            "path": "/Relay/1/State",
            "type": "enum",
            "name": "Venus relay 2 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            },
            "writable": true
        },
        "initial": "",
        "name": "Alternator ON or OFF",
        "onlyChanges": false,
        "x": 1420,
        "y": 960,
        "wires": []
    },
    {
        "id": "c4c109cd160e671d",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "12",
        "payloadType": "num",
        "x": 70,
        "y": 960,
        "wires": [
            [
                "6bad76ae860ca9d0"
            ]
        ]
    },
    {
        "id": "84558b2bdd4d1b9a",
        "type": "comment",
        "z": "11a4bfd096900c1f",
        "name": "Function to manage the alternator relay based on conditions like Alternator temp, state of charge and balance need. Timeout for debouncing purpose included",
        "info": "",
        "x": 540,
        "y": 840,
        "wires": []
    },
    {
        "id": "247289a389946fcf",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "Inject Alt Auto",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "9de27f987249dda1"
            ]
        ]
    },
    {
        "id": "9de27f987249dda1",
        "type": "ui_multistate_switch",
        "z": "11a4bfd096900c1f",
        "name": "Alternator charge cycles ",
        "group": "2d51d403d65e5320",
        "order": 4,
        "width": 9,
        "height": 1,
        "label": "Alternator charge cycles ",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": true,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Automatic",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Manual",
                "value": "0",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "1868aad3d10b0fd9"
            ]
        ]
    },
    {
        "id": "947f58d3bea068b9",
        "type": "comment",
        "z": "11a4bfd096900c1f",
        "name": "User interactive Local Values",
        "info": "Auto = 1\nManual = 0",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "f53f7413fa7c31b8",
        "type": "function",
        "z": "11a4bfd096900c1f",
        "name": "Reset ChargeEnabledAlt based on AltCycle",
        "func": "// Retrieve values from global context\nvar ChargeEnabledAlt = global.get(\"ChargeEnabledAlt\");\nvar RestartSOC = global.get(\"RestartSOC\");\nvar BattSoc = global.get(\"BattSoc\");\n\n// Check if ChargeEnabledAlt  is 0\nif (ChargeEnabledAlt === 0) {\n    // Compare BattSoc to RestartSOC\n    if (BattSoc <= RestartSOC) {\n        // Set ChargeEnabledAlt  to 1\n        global.set(\"ChargeEnabledAlt\", 1);\n    }\n}\n\n// node.warn(\"ChargeEnabledAlt : \" + ChargeEnabledAlt );\n// node.warn(\"RestartSOC: \" + RestartSOC);\n// node.warn(\"BattSoc: \" + BattSoc);\n\n// Pass the message to the next node (if needed)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "167b069c33d06479",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2000,
        "wires": [
            [
                "f53f7413fa7c31b8"
            ]
        ]
    },
    {
        "id": "a5a97826792f9399",
        "type": "inject",
        "z": "11a4bfd096900c1f",
        "name": "AltChargeEnables on startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.7",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "b116af83576cdc13"
            ]
        ]
    },
    {
        "id": "8fb6ae39f85ac2ba",
        "type": "ui_text",
        "z": "11a4bfd096900c1f",
        "group": "2d51d403d65e5320",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Stbd Alt temp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1410,
        "y": 460,
        "wires": []
    },
    {
        "id": "9e4ba3399ba08f26",
        "type": "ui_text",
        "z": "11a4bfd096900c1f",
        "group": "2d51d403d65e5320",
        "order": 14,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Port Alt temp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1410,
        "y": 520,
        "wires": []
    },
    {
        "id": "a73efdb8ceac55af",
        "type": "debug",
        "z": "11a4bfd096900c1f",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 900,
        "wires": []
    },
    {
        "id": "1868aad3d10b0fd9",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AltSOCmgmt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a271ea7a7a548684",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AltMaxTemp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b116af83576cdc13",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AltChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "efdc66b7fac0c642",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StbdAltTemp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 460,
        "wires": [
            [
                "8fb6ae39f85ac2ba"
            ]
        ]
    },
    {
        "id": "55bc0e079bb67f60",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "PortAltTemp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 520,
        "wires": [
            [
                "9e4ba3399ba08f26"
            ]
        ]
    },
    {
        "id": "3e7d4bc4af3d489a",
        "type": "change",
        "z": "11a4bfd096900c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AlternatorState",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 580,
        "wires": [
            []
        ]
    }
]
